# kubectl create configmap game-config --from-file=configure-pod-container/dd1/key
apiVersion: v1
kind: ConfigMap
metadata:
  name: quorum-permissioned-config
  
  labels:
    app: qubernetes
    name: quorum-permissioned-config
data:
  permissioned-nodes.json: |

    [
      "enode://75796f5803e678bcd9bbf8371f6ea70c03a065233300346055a9bca5e1e4e988d8148a48326d449d54c55ea4e87bcf02d4ff474320b2b4a02879f49d93165969@quorum-node1:30303?discport=0&raftport=50401",
      "enode://2dea3a3a06bad34d2e3ba308354f513758fb731c02811daf24c56068c934ff4427a130ad7a64eae7a7c448d738082cc24bc46c9f1908a700ff5d2edde1eebe7d@quorum-node2:30303?discport=0&raftport=50401",
      "enode://57f41ab9c9264df5b5edefd600a17a73c34fe86b8ff26ac744972250b729412e009ac50e2cb23c682f239ce25be353325daeca5a280517aa2ed1984759d8c564@aa5708a0f52214e79a3e50e01e8357d0-1323063715.eu-west-2.elb.amazonaws.com:31373?discport=0&raftport=50401",
      "enode://16ad3057884bdd021e88e529e258ef300f255e629202f31c83b85c696ce11a35cfc6ec164bd3d792951b048b518410d1b0d1bfb67e080f8c563467077a8c90a3@a24ddee72677442aab21fdf0316856fc-1320070305.eu-west-2.elb.amazonaws.com:32169?discport=0&raftport=50401",
      "enode://3ad9524bd0a09d3884e873820b47b035d9e263c351f11824b2df4aeb9e3d5ad7227145d36c93de1c99542aa429b6a73a81d17bdf6f4b2353f918cfe69db56199@a734a7ffc9928444dbe71752d4fae260-1770984830.eu-west-2.elb.amazonaws.com:30618?discport=0&raftport=50401",
      "enode://951ff6e66a94035b0ed1108968adf73fbb7ae6078cb4cd820f98db9d014bf21d132ac3993a654a3dc223ee44617e8f8a389bafb9ae1a315d54b4951d7e389451@a40bffef4d1124e0094dfd5a4d046e57-1891155682.eu-west-2.elb.amazonaws.com:31681?discport=0&raftport=50401" 
    ]

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: tessera-config
  
  labels:
    app: qubernetes
    name: tessera-config
data:
  tessera-config.json.tmpl: |-
    
    
    
    
    {
        "useWhiteList": false,
        "jdbc": {
            "username": "sa",
            "password": "",
            "url": "jdbc:h2:/etc/quorum/qdata/tm/db;MODE=Oracle;TRACE_LEVEL_SYSTEM_OUT=0",
            "autoCreateTables": true
        },
        "server": {
            "port": 9001,
            "hostName": "http://%THIS_SERVICE_HOST%",
            "bindingAddress": "http://0.0.0.0:9001",
            "sslConfig": {
                "tls": "OFF",
                "generateKeyStoreIfNotExisted": true,
                "serverKeyStore": "/etc/quorum/qdata/tm/server-keystore",
                "serverKeyStorePassword": "quorum",
                "serverTrustStore": "/etc/quorum/qdata/tm/server-truststore",
                "serverTrustStorePassword": "quorum",
                "serverTrustMode": "TOFU",
                "knownClientsFile": "/etc/quorum/qdata/tm/knownClients",
                "clientKeyStore": "/etc/quorum/qdata/tm/client-keystore",
                "clientKeyStorePassword": "quorum",
                "clientTrustStore": "/etc/quorum/qdata/tm/client-truststore",
                "clientTrustStorePassword": "quorum",
                "clientTrustMode": "TOFU",
                "knownServersFile": "/etc/quorum/qdata/tm/knownServers"
            }
        },
        "peer": [
    
             {
               "url": "http://quorum-node1:9001"
             },
    
    
             {
               "url": "http://quorum-node2:9001"
             }
    
        ],
        "keys": {
            "passwords": [],
            "keyData": [
                {
                    "privateKeyPath": "/etc/quorum/qdata/tm/tm.key",
                    "publicKeyPath": "/etc/quorum/qdata/tm/tm.pub"
                }
            ]
        },
        "alwaysSendTo": [],
        "unixSocketFile": "/etc/quorum/qdata/tm/tm.ipc"
    }
    

  tessera-config-enhanced.json.tmpl: |-
    
    
    
    {
      "useWhiteList": false,
      "jdbc": {
        "username": "sa",
        "password": "",
        "url": "jdbc:h2:/etc/quorum/qdata/tm/db;MODE=Oracle;TRACE_LEVEL_SYSTEM_OUT=0",
        "autoCreateTables": true
      },
      "serverConfigs":[
      {
        "app":"ThirdParty",
        "enabled": true,
        "serverSocket":{
          "type":"INET",
          "port": 9080,
          "hostName": "http://%THIS_SERVICE_HOST%"
        },
        "communicationType" : "REST"
      },
      {
        "app":"Q2T",
        "enabled": true,
        "serverSocket":{
          "type":"UNIX",
          "path":"/etc/quorum/qdata/tm/tm.ipc"
        },
        "communicationType" : "UNIX_SOCKET"
      },
      {
        "app":"P2P",
        "enabled": true,
        "serverSocket":{
          "type":"INET",
          "port": 9001,
          "hostName": "http://%THIS_SERVICE_HOST%",
          "bindingAddress": "http://0.0.0.0:9001"
        },
        "sslConfig": {
          "tls": "OFF",
          "generateKeyStoreIfNotExisted": true,
          "serverKeyStore": "/etc/quorum/qdata/tm/server-keystore",
          "serverKeyStorePassword": "quorum",
          "serverTrustStore": "/etc/quorum/qdata/tm/server-truststore",
          "serverTrustStorePassword": "quorum",
          "serverTrustMode": "TOFU",
          "knownClientsFile": "/etc/quorum/qdata/tm/knownClients",
          "clientKeyStore": "/etc/quorum/qdata/tm/client-keystore",
          "clientKeyStorePassword": "quorum",
          "clientTrustStore": "/etc/quorum/qdata/tm/client-truststore",
          "clientTrustStorePassword": "quorum",
          "clientTrustMode": "TOFU",
          "knownServersFile": "/etc/quorum/qdata/tm/knownServers"
        },
        "communicationType" : "REST"
      }
      ],
    
        "peer": [
    
         {
               "url": "http://quorum-node1:9001"
             },
    
    
         {
               "url": "http://quorum-node2:9001"
             }
    
        ],
        "keys": {
             "passwords": [],
             "keyData": [
                {
                    "config": %THIS_PRIV_KEY%,
                    "publicKey": "%THIS_PUB_KEY%"
                }
              ]
         },
        "alwaysSendTo": []
    }
  tessera-config-9.0.json.tmpl: |-
    
    
    
    {
      "useWhiteList": false,
      "jdbc": {
        "username": "sa",
        "password": "",
        "url": "jdbc:h2:/etc/quorum/qdata/tm/db;MODE=Oracle;TRACE_LEVEL_SYSTEM_OUT=0",
        "autoCreateTables": true
      },
      "serverConfigs":[
      {
        "app":"ThirdParty",
        "enabled": true,
        "serverAddress": "http://%THIS_SERVICE_HOST%:9080",
        "cors": {
            "allowedMethods": [
                "GET",
                "OPTIONS"
            ],
            "allowedOrigins": [
                "*"
            ]
        },
        "communicationType" : "REST"
      },
      {
        "app":"Q2T",
        "enabled": true,
        "serverAddress":"unix:/etc/quorum/qdata/tm/tm.ipc",
        "communicationType" : "REST"
      },
      {
        "app":"P2P",
        "enabled": true,
        "serverAddress":"http://%THIS_SERVICE_HOST%:9001",
        "sslConfig": {
          "tls": "OFF",
          "generateKeyStoreIfNotExisted": true,
          "serverKeyStore": "/etc/quorum/qdata/tm/server-keystore",
          "serverKeyStorePassword": "quorum",
          "serverTrustStore": "/etc/quorum/qdata/tm/server-truststore",
          "serverTrustStorePassword": "quorum",
          "serverTrustMode": "TOFU",
          "knownClientsFile": "/etc/quorum/qdata/tm/knownClients",
          "clientKeyStore": "/etc/quorum/qdata/tm/client-keystore",
          "clientKeyStorePassword": "quorum",
          "clientTrustStore": "/etc/quorum/qdata/tm/client-truststore",
          "clientTrustStorePassword": "quorum",
          "clientTrustMode": "TOFU",
          "knownServersFile": "/etc/quorum/qdata/tm/knownServers"
        },
        "communicationType" : "REST"
      }
      ],
    
        "peer": [
    
         {
               "url": "http://quorum-node1:9001"
             },
    
    
         {
               "url": "http://quorum-node2:9001"
             }
    
        ],
        "keys": {
             "passwords": [],
             "keyData": [
                {
                    "privateKeyPath": "%THIS_PRIV_KEY%",
                    "publicKeyPath": "%THIS_PUB_KEY%"
                }
              ]
         },
        "alwaysSendTo": [],
        "features": {
            "enablePrivacyEnhancements": true
        }
    }

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: contracts-config
  
  labels:
    app: qubernetes
    name: contracts-config
data:
  runscript.sh: |-
    #!/bin/ash
    PRIVATE_CONFIG=$TM_HOME/tm.ipc geth --exec "loadScript(\"$1\")" attach --datadir $QUORUM_DATA_DIR ipc:$QUORUM_DATA_DIR/geth.ipc
# set the tm.pub for node1 in the privateFor field.
# supports single node deployment.
  private_contract.js: |-

    a = eth.accounts[0]
    web3.eth.defaultAccount = a;
    
    // abi and bytecode generated from simplestorage.sol:
    // > solcjs --bin --abi simplestorage.sol
    var abi = [{"constant":true,"inputs":[],"name":"storedData","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"},{"constant":false,"inputs":[{"name":"x","type":"uint256"}],"name":"set","outputs":[],"payable":false,"type":"function"},{"constant":true,"inputs":[],"name":"get","outputs":[{"name":"retVal","type":"uint256"}],"payable":false,"type":"function"},{"inputs":[{"name":"initVal","type":"uint256"}],"payable":false,"type":"constructor"}];
    
    var bytecode = "0x6060604052341561000f57600080fd5b604051602080610149833981016040528080519060200190919050505b806000819055505b505b610104806100456000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff1680632a1afcd914605157806360fe47b11460775780636d4ce63c146097575b600080fd5b3415605b57600080fd5b606160bd565b6040518082815260200191505060405180910390f35b3415608157600080fd5b6095600480803590602001909190505060c3565b005b341560a157600080fd5b60a760ce565b6040518082815260200191505060405180910390f35b60005481565b806000819055505b50565b6000805490505b905600a165627a7a72305820d5851baab720bba574474de3d09dbeaabc674a15f4dd93b974908476542c23f00029";
    
    var simpleContract = web3.eth.contract(abi);
    var simple = simpleContract.new(42, {from:web3.eth.accounts[0], data: bytecode, gas: 0x47b760, privateFor: ["7ribX/mH/HBhVT37cF1Ntk1fBK84jlOQ00pF7s6oijo="]}, function(e, contract) {
    	if (e) {
    		console.log("err creating contract", e);
    	} else {
    		if (!contract.address) {
    			console.log("Contract transaction send: TransactionHash: " + contract.transactionHash + " waiting to be mined...");
    		} else {
    			console.log("Contract mined! Address: " + contract.address);
    			console.log(contract);
    		}
    	}
    });
  public_contract.js: |-
    a = eth.accounts[0]
    web3.eth.defaultAccount = a;
    
    // abi and bytecode generated from simplestorage.sol:
    // > solcjs --bin --abi simplestorage.sol
    var abi = [{"constant":true,"inputs":[],"name":"storedData","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"},{"constant":false,"inputs":[{"name":"x","type":"uint256"}],"name":"set","outputs":[],"payable":false,"type":"function"},{"constant":true,"inputs":[],"name":"get","outputs":[{"name":"retVal","type":"uint256"}],"payable":false,"type":"function"},{"inputs":[{"name":"initVal","type":"uint256"}],"payable":false,"type":"constructor"}];
    
    var bytecode = "0x6060604052341561000f57600080fd5b604051602080610149833981016040528080519060200190919050505b806000819055505b505b610104806100456000396000f30060606040526000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff1680632a1afcd914605157806360fe47b11460775780636d4ce63c146097575b600080fd5b3415605b57600080fd5b606160bd565b6040518082815260200191505060405180910390f35b3415608157600080fd5b6095600480803590602001909190505060c3565b005b341560a157600080fd5b60a760ce565b6040518082815260200191505060405180910390f35b60005481565b806000819055505b50565b6000805490505b905600a165627a7a72305820d5851baab720bba574474de3d09dbeaabc674a15f4dd93b974908476542c23f00029";
    
    var simpleContract = web3.eth.contract(abi);
    var simple = simpleContract.new(42, {from:web3.eth.accounts[0], data: bytecode, gas: 0x47b760}, function(e, contract) {
            if (e) {
                    console.log("err creating contract", e);
            } else {
                    if (!contract.address) {
                            console.log("Contract transaction send: TransactionHash: " + contract.transactionHash + " waiting to be mined...");
                    } else {
                            console.log("Contract mined! Address: " + contract.address);
                            console.log(contract);
                    }
            }
    });



## Addition config used to manage the nodes lifecycle, e.g. add /remove nodes.
## include ibft helpers as we don't know which nodes will be running which consensus.

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: node-management
  
  labels:
    app: qubernetes
    name: node-management
data:
  ibft_propose.sh: |-
    #/bin/ash
    
    if [ $# -lt 1 ]; then
      echo " An address to vote in, or out, must be provided: "
      echo " ./propose_ibft.sh HEX_ADDRESS (true|false)"
    fi
    
    ADDRESS=$1
    VOTE_BOOL=true
    
    if [ $# -eq 2 ]; then
     VOTE_BOOL=$2
    fi
    RES=$(geth --exec "istanbul.propose(\"$1\", $VOTE_BOOL)" attach ipc:$QUORUM_HOME/dd/geth.ipc)
    echo $RES
  ibft_propose_all.sh: |-
    #!/bin/ash
    #set -xe
    
    for Addr in $( awk '/validators/,0' $QHOME/istanbul-validator-config.toml/istanbul-validator-config.toml | grep "0x" | sed 's/,//g; s/"//g' ); do
      echo $Addr
      $QHOME/node-management/ibft_propose.sh $Addr true
    done
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: istanbul-validator-config.toml
  
  labels:
    app: qubernetes
    name: istanbul-validator-config
data:
  istanbul-validator-config.toml: |-
    vanity = "0x00"
    validators = [
    "0x228dB95f0f2be002fea420829e9502D8E3B76d6E",
    "0x99F1E0B789a9dF9F4632DA27FbfEe2b7B63c3123",
    "0x06c9c33a84e3ebd1615830351bc707dd7cb17889", 
    "0x6d2cb4d528bee8183a63ebf0d074f497718b3fe3", 
    "0x821c69c7dbbf32dd8643c31cd0728bcf46eecd05", 
    "0xe041b94c3b2299d9c804777cd80618766b310a3e"
    ]

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: geth-helpers
  
  labels:
    app: qubernetes
    name: geth-helpers
data:
  geth-attach.sh: |-
    #!/bin/sh
    
    # helper for connecting to geth from
    # outside the container
    # kubectl exec -it $POD -c quorum -- /geth-helpers/geth-attach.sh
    echo "connecting to geth $QHOME"
    geth attach --datadir $QUORUM_DATA_DIR $QUORUM_DATA_DIR/geth.ipc
  geth-exec.sh: |-
    #!/bin/sh
    
    # helper for connecting to geth from
    # outside the container
    # kubectl exec -it $POD -c quorum -- /geth-helpers/geth-exec.sh "admin.peers.length"
    
    GETH_CMD="eth.blockNumber"
    if [ "$#" -gt 0 ]; then
      GETH_CMD=$1
    fi
    # see: https://github.com/ethereum/go-ethereum/pull/17281
    # https://github.com/ethereum/go-ethereum/issues/16905
    # to avoid warning being returned
    # "WARN [02-20|00:21:04.382] Sanitizing cache to Go's GC limits  provided=1024 updated=663"
    geth --exec $GETH_CMD  --cache=16 attach --datadir $QUORUM_DATA_DIR $QUORUM_DATA_DIR/geth.ipc

